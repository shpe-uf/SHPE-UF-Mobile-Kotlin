//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '4.0.0-beta.4'.
//
package com.example.shpe_uf_mobile_kotlin.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.IntAdapter
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.missingField
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.example.shpe_uf_mobile_kotlin.EventsQuery
import kotlin.Int
import kotlin.String
import kotlin.collections.List

public object EventsQuery_ResponseAdapter {
  public object Data : Adapter<EventsQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("getUser")

    override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        EventsQuery.Data {
      var _getUser: EventsQuery.GetUser? = null

      while (true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _getUser = GetUser.obj().nullable().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return EventsQuery.Data(
        getUser = _getUser
      )
    }

    override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: EventsQuery.Data,
    ) {
      writer.name("getUser")
      GetUser.obj().nullable().toJson(writer, customScalarAdapters, value.getUser)
    }
  }

  public object GetUser : Adapter<EventsQuery.GetUser> {
    public val RESPONSE_NAMES: List<String> = listOf("events")

    override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        EventsQuery.GetUser {
      var _events: List<EventsQuery.Event?>? = null

      while (true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _events = Event.obj().nullable().list().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return EventsQuery.GetUser(
        events = _events ?: missingField(reader, "events")
      )
    }

    override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: EventsQuery.GetUser,
    ) {
      writer.name("events")
      Event.obj().nullable().list().toJson(writer, customScalarAdapters, value.events)
    }
  }

  public object Event : Adapter<EventsQuery.Event> {
    public val RESPONSE_NAMES: List<String> = listOf("createdAt", "name", "points", "category")

    override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        EventsQuery.Event {
      var _createdAt: String? = null
      var _name: String? = null
      var _points: Int? = null
      var _category: String? = null

      while (true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _createdAt = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _name = StringAdapter.fromJson(reader, customScalarAdapters)
          2 -> _points = IntAdapter.fromJson(reader, customScalarAdapters)
          3 -> _category = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return EventsQuery.Event(
        createdAt = _createdAt ?: missingField(reader, "createdAt"),
        name = _name ?: missingField(reader, "name"),
        points = _points ?: missingField(reader, "points"),
        category = _category ?: missingField(reader, "category")
      )
    }

    override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: EventsQuery.Event,
    ) {
      writer.name("createdAt")
      StringAdapter.toJson(writer, customScalarAdapters, value.createdAt)

      writer.name("name")
      StringAdapter.toJson(writer, customScalarAdapters, value.name)

      writer.name("points")
      IntAdapter.toJson(writer, customScalarAdapters, value.points)

      writer.name("category")
      StringAdapter.toJson(writer, customScalarAdapters, value.category)
    }
  }
}
