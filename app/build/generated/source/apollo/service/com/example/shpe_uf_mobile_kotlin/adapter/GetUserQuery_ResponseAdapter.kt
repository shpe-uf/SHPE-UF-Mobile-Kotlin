//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '4.0.0-beta.5'.
//
package com.example.shpe_uf_mobile_kotlin.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.NullableStringAdapter
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.missingField
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.example.shpe_uf_mobile_kotlin.GetUserQuery
import kotlin.String
import kotlin.collections.List

public object GetUserQuery_ResponseAdapter {
  public object Data : Adapter<GetUserQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("getUser")

    override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetUserQuery.Data {
      var _getUser: GetUserQuery.GetUser? = null

      while (true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _getUser = GetUser.obj().nullable().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetUserQuery.Data(
        getUser = _getUser
      )
    }

    override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetUserQuery.Data,
    ) {
      writer.name("getUser")
      GetUser.obj().nullable().toJson(writer, customScalarAdapters, value.getUser)
    }
  }

  public object GetUser : Adapter<GetUserQuery.GetUser> {
    public val RESPONSE_NAMES: List<String> = listOf("firstName", "lastName", "username", "email",
        "sex", "ethnicity", "country", "year", "graduating", "classes", "internships",
        "socialMedia", "photo")

    override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetUserQuery.GetUser {
      var _firstName: String? = null
      var _lastName: String? = null
      var _username: String? = null
      var _email: String? = null
      var _sex: String? = null
      var _ethnicity: String? = null
      var _country: String? = null
      var _year: String? = null
      var _graduating: String? = null
      var _classes: List<String?>? = null
      var _internships: List<String?>? = null
      var _socialMedia: List<String?>? = null
      var _photo: String? = null

      while (true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _firstName = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _lastName = StringAdapter.fromJson(reader, customScalarAdapters)
          2 -> _username = StringAdapter.fromJson(reader, customScalarAdapters)
          3 -> _email = StringAdapter.fromJson(reader, customScalarAdapters)
          4 -> _sex = StringAdapter.fromJson(reader, customScalarAdapters)
          5 -> _ethnicity = StringAdapter.fromJson(reader, customScalarAdapters)
          6 -> _country = StringAdapter.fromJson(reader, customScalarAdapters)
          7 -> _year = StringAdapter.fromJson(reader, customScalarAdapters)
          8 -> _graduating = StringAdapter.fromJson(reader, customScalarAdapters)
          9 -> _classes = NullableStringAdapter.list().nullable().fromJson(reader, customScalarAdapters)
          10 -> _internships = NullableStringAdapter.list().nullable().fromJson(reader, customScalarAdapters)
          11 -> _socialMedia = NullableStringAdapter.list().nullable().fromJson(reader, customScalarAdapters)
          12 -> _photo = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetUserQuery.GetUser(
        firstName = _firstName ?: missingField(reader, "firstName"),
        lastName = _lastName ?: missingField(reader, "lastName"),
        username = _username ?: missingField(reader, "username"),
        email = _email ?: missingField(reader, "email"),
        sex = _sex ?: missingField(reader, "sex"),
        ethnicity = _ethnicity ?: missingField(reader, "ethnicity"),
        country = _country ?: missingField(reader, "country"),
        year = _year ?: missingField(reader, "year"),
        graduating = _graduating ?: missingField(reader, "graduating"),
        classes = _classes,
        internships = _internships,
        socialMedia = _socialMedia,
        photo = _photo ?: missingField(reader, "photo")
      )
    }

    override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetUserQuery.GetUser,
    ) {
      writer.name("firstName")
      StringAdapter.toJson(writer, customScalarAdapters, value.firstName)

      writer.name("lastName")
      StringAdapter.toJson(writer, customScalarAdapters, value.lastName)

      writer.name("username")
      StringAdapter.toJson(writer, customScalarAdapters, value.username)

      writer.name("email")
      StringAdapter.toJson(writer, customScalarAdapters, value.email)

      writer.name("sex")
      StringAdapter.toJson(writer, customScalarAdapters, value.sex)

      writer.name("ethnicity")
      StringAdapter.toJson(writer, customScalarAdapters, value.ethnicity)

      writer.name("country")
      StringAdapter.toJson(writer, customScalarAdapters, value.country)

      writer.name("year")
      StringAdapter.toJson(writer, customScalarAdapters, value.year)

      writer.name("graduating")
      StringAdapter.toJson(writer, customScalarAdapters, value.graduating)

      writer.name("classes")
      NullableStringAdapter.list().nullable().toJson(writer, customScalarAdapters, value.classes)

      writer.name("internships")
      NullableStringAdapter.list().nullable().toJson(writer, customScalarAdapters,
          value.internships)

      writer.name("socialMedia")
      NullableStringAdapter.list().nullable().toJson(writer, customScalarAdapters,
          value.socialMedia)

      writer.name("photo")
      StringAdapter.toJson(writer, customScalarAdapters, value.photo)
    }
  }
}
